### Transactions table

CREATE TABLE <login>.transactions ON CLUSTER kube_clickhouse_cluster
(
    user_id_out Int64,
    user_id_in Int64,
    important Boolean,
    amount Float64,
    datetime DateTime
)
ENGINE = MergeTree()
PARTITION BY toYear(datetime)
ORDER BY (user_id_out, user_id_in);

CREATE TABLE <login>.distr_transactions ON CLUSTER kube_clickhouse_cluster AS <login>.transactions
ENGINE = Distributed(kube_clickhouse_cluster, <login>, transactions, xxHash64(user_id_out, user_id_in));


cat shared-data/clickhouse_data/transactions_12M.parquet | clickhouse-client --user=<login> --host=clickhouse-3.clickhouse.clickhouse --ask-password --query="INSERT INTO <login>.distr_transactions FORMAT Parquet"


SELECT table, formatReadableSize(sum(data_compressed_bytes)) FROM system.parts WHERE database='<login>' AND active=1 GROUP BY database, table;




### MV 1

### 1.1

CREATE MATERIALIZED VIEW <login>.mv_avg_out_month ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, month)
POPULATE
AS SELECT
    user_id_out AS user_id,
    formatDateTime(datetime, '%Y-%m') AS month,
    avgState(amount) AS avg_out_month
FROM
    <login>.transactions
GROUP BY
    user_id,
	month;


CREATE TABLE <login>.distr_mv_avg_out_month ON CLUSTER kube_clickhouse_cluster AS <login>.mv_avg_out_month
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_avg_out_month);


SELECT user_id, month, ROUND(avgMerge(avg_out_month), 3) as avg_out_month FROM <login>.distr_mv_avg_out_month GROUP BY user_id, month ORDER BY user_id, month LIMIT 30;


### 1.2

CREATE MATERIALIZED VIEW <login>.mv_avg_in_month ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, month)
POPULATE
AS SELECT
    user_id_in AS user_id,
    formatDateTime(datetime, '%Y-%m') AS month,
    avgState(amount) AS avg_in_month
FROM
    <login>.transactions
GROUP BY
    user_id,
	month;


CREATE TABLE <login>.distr_mv_avg_in_month ON CLUSTER kube_clickhouse_cluster AS <login>.mv_avg_in_month
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_avg_in_month);


SELECT user_id, month, ROUND(avgMerge(avg_in_month), 3) as avg_in_month FROM <login>.distr_mv_avg_in_month GROUP BY user_id, month ORDER BY user_id, month LIMIT 30;


### 1.3

CREATE MATERIALIZED VIEW <login>.mv_avg_out_day ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, day)
POPULATE
AS SELECT
    user_id_out AS user_id,
    formatDateTime(datetime, '%Y-%m-%d') AS day,
    avgState(amount) AS avg_out_day
FROM
    <login>.transactions
GROUP BY
    user_id,
	day;


CREATE TABLE <login>.distr_mv_avg_out_day ON CLUSTER kube_clickhouse_cluster AS <login>.mv_avg_out_day
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_avg_out_day);


SELECT user_id, day, ROUND(avgMerge(avg_out_day), 3) AS avg_out_day FROM <login>.distr_mv_avg_out_day GROUP BY user_id, day ORDER BY user_id, day LIMIT 30;


### 1.4

CREATE MATERIALIZED VIEW <login>.mv_avg_in_day ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, day)
POPULATE
AS SELECT
    user_id_in AS user_id,
    formatDateTime(datetime, '%Y-%m-%d') AS day,
    avgState(amount) AS avg_in_day
FROM
    <login>.transactions
GROUP BY
    user_id,
	day;


CREATE TABLE <login>.distr_mv_avg_in_day ON CLUSTER kube_clickhouse_cluster AS <login>.mv_avg_in_day
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_avg_in_day);


SELECT user_id, day, ROUND(avgMerge(avg_in_day), 3) AS avg_in_day FROM <login>.distr_mv_avg_in_day GROUP BY user_id, day ORDER BY user_id, day LIMIT 30;




### MV 3

### 3.1

CREATE MATERIALIZED VIEW <login>.mv_sum_out_month ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, month)
POPULATE
AS SELECT
    user_id_out AS user_id,
    formatDateTime(datetime, '%Y-%m') AS month,
    sumState(amount) AS sum_out_month
FROM
    <login>.transactions
GROUP BY
    user_id,
	month;


CREATE TABLE <login>.distr_mv_sum_out_month ON CLUSTER kube_clickhouse_cluster AS <login>.mv_sum_out_month
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_sum_out_month);


SELECT user_id, month, ROUND(sumMerge(sum_out_month), 3) AS sum_out_month FROM <login>.distr_mv_sum_out_month GROUP BY user_id, month ORDER BY user_id, month LIMIT 30;


### 3.2

CREATE MATERIALIZED VIEW <login>.mv_sum_in_month ON CLUSTER kube_clickhouse_cluster
ENGINE = AggregatingMergeTree()
ORDER BY (user_id, month)
POPULATE
AS SELECT
    user_id_in AS user_id,
    formatDateTime(datetime, '%Y-%m') AS month,
    sumState(amount) AS sum_in_month
FROM
    <login>.transactions
GROUP BY
    user_id,
	month;


CREATE TABLE <login>.distr_mv_sum_in_month ON CLUSTER kube_clickhouse_cluster AS <login>.mv_sum_in_month
ENGINE = Distributed(kube_clickhouse_cluster, <login>, mv_sum_in_month);


SELECT user_id, month, ROUND(sumMerge(sum_in_month), 3) AS sum_in_month FROM <login>.distr_mv_sum_in_month GROUP BY user_id, month ORDER BY user_id, month LIMIT 30;




### MV 4

### 4.1

CREATE MATERIALIZED VIEW <login>.mv_saldo ON CLUSTER kube_clickhouse_cluster
ENGINE = MergeTree()
ORDER BY user_id
POPULATE
AS (
	SELECT user_id, sum_in - sum_out AS balance FROM
	(
	SELECT
		user_id_out as user_id,
		SUM(amount) AS sum_out
	FROM <login>.distr_transactions
	GROUP BY user_id_out
	) out_t
	GLOBAL JOIN
	(
	SELECT
		user_id_in as user_id,
		SUM(amount) AS sum_in
	FROM <login>.distr_transactions
	GROUP BY user_id_in
	) in_t
	ON out_t.user_id = in_t.user_id
);


SELECT user_id, ROUND(balance, 3) as balance FROM <login>.mv_saldo ORDER BY user_id LIMIT 30;
